// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: author.sql

package database

import (
	"context"
	"database/sql"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO "Author" (fullname, dob)
VALUES ($1,$2)
RETURNING id, fullname, dob, created_at, updated_at
`

type CreateAuthorParams struct {
	Fullname string
	Dob      sql.NullTime
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, createAuthor, arg.Fullname, arg.Dob)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Dob,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllAuthors = `-- name: GetAllAuthors :many
SELECT a.id, a.fullname, a.dob, a.created_at, a.updated_at
FROM "Author" as a
`

func (q *Queries) GetAllAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, getAllAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.Dob,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuthorByID = `-- name: GetAuthorByID :one
SELECT a.id, a.fullname, a.dob, a.created_at, a.updated_at
FROM "Author" as a
WHERE id = $1
`

func (q *Queries) GetAuthorByID(ctx context.Context, id int32) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthorByID, id)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Dob,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthorsByBookID = `-- name: GetAuthorsByBookID :many
SELECT a.id, a.fullname, a.dob, a.created_at, a.updated_at
FROM "Author" as a INNER JOIN "Book_Author" as ba
ON a.id = ba.author_id
WHERE ba.book_id = $1
`

func (q *Queries) GetAuthorsByBookID(ctx context.Context, bookID int32) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, getAuthorsByBookID, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.Dob,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPageAuthors = `-- name: GetPageAuthors :many
SELECT a.id, a.fullname, a.dob, a.created_at, a.updated_at
FROM "Author" as a
LIMIT $1
OFFSET $1 * ($2::INTEGER - 1)
`

type GetPageAuthorsParams struct {
	Size int32
	Page int32
}

func (q *Queries) GetPageAuthors(ctx context.Context, arg GetPageAuthorsParams) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, getPageAuthors, arg.Size, arg.Page)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.Dob,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
