// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: book.sql

package database

import (
	"context"
	"database/sql"
)

const createBook = `-- name: CreateBook :one
INSERT INTO "Book" (title, published_year)
VALUES ($1,$2)
RETURNING id, title, published_year, available_quantity, borrow_quantity, created_at, updated_at
`

type CreateBookParams struct {
	Title         string
	PublishedYear int32
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook, arg.Title, arg.PublishedYear)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PublishedYear,
		&i.AvailableQuantity,
		&i.BorrowQuantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllBooks = `-- name: GetAllBooks :many
SELECT b.id, b.title, b.published_year, b.available_quantity, b.borrow_quantity, b.created_at, b.updated_at
FROM "Book" as b
`

func (q *Queries) GetAllBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.PublishedYear,
			&i.AvailableQuantity,
			&i.BorrowQuantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookByID = `-- name: GetBookByID :one
SELECT b.id, b.title, b.published_year, b.available_quantity, b.borrow_quantity, b.created_at, b.updated_at
FROM "Book" as b
WHERE id = $1
`

func (q *Queries) GetBookByID(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookByID, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PublishedYear,
		&i.AvailableQuantity,
		&i.BorrowQuantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPageBookWithFilter = `-- name: GetPageBookWithFilter :many
SELECT DISTINCT b.id, b.title, b.published_year, b.available_quantity, b.borrow_quantity, b.created_at, b.updated_at
FROM "Book" as b
LEFT JOIN "Book_Genre" as bg
ON b.id == bg.book_id
LEFT JOIN "Book_Author" as ba
ON b.id == ba.book_id
WHERE
    ($1::text IS NULL OR b.title ILIKE '%' || $1::text || '%')
    AND ($2::int IS NULL OR ba.author_id = $2::int)
    AND ($3::int IS NULL OR bg.genre_id = $3::int)
LIMIT $4
OFFSET $4 * ($5::INTEGER - 1)
`

type GetPageBookWithFilterParams struct {
	Title    sql.NullString
	Authorid sql.NullInt32
	Genreid  sql.NullInt32
	Size     int32
	Page     int32
}

func (q *Queries) GetPageBookWithFilter(ctx context.Context, arg GetPageBookWithFilterParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getPageBookWithFilter,
		arg.Title,
		arg.Authorid,
		arg.Genreid,
		arg.Size,
		arg.Page,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.PublishedYear,
			&i.AvailableQuantity,
			&i.BorrowQuantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
