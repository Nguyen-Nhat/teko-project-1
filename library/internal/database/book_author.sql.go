// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: book_author.sql

package database

import (
	"context"
)

const checkBookAuthorExists = `-- name: CheckBookAuthorExists :one
SELECT EXISTS(
    SELECT ba.id, ba.book_id, ba.author_id FROM "Book_Author" ba
    WHERE ba.book_id = $1 AND ba.author_id = $2
)
`

type CheckBookAuthorExistsParams struct {
	BookID   int32
	AuthorID int32
}

func (q *Queries) CheckBookAuthorExists(ctx context.Context, arg CheckBookAuthorExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkBookAuthorExists, arg.BookID, arg.AuthorID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const insertBookAuthor = `-- name: InsertBookAuthor :one
INSERT INTO "Book_Author" (book_id, author_id)
VALUES ($1,$2)
RETURNING id, book_id, author_id
`

type InsertBookAuthorParams struct {
	BookID   int32
	AuthorID int32
}

func (q *Queries) InsertBookAuthor(ctx context.Context, arg InsertBookAuthorParams) (BookAuthor, error) {
	row := q.db.QueryRowContext(ctx, insertBookAuthor, arg.BookID, arg.AuthorID)
	var i BookAuthor
	err := row.Scan(&i.ID, &i.BookID, &i.AuthorID)
	return i, err
}

const removeBookAuthor = `-- name: RemoveBookAuthor :exec
DELETE FROM "Book_Author" ba
WHERE ba.book_id = $1 AND ba.author_id = $2
`

type RemoveBookAuthorParams struct {
	BookID   int32
	AuthorID int32
}

func (q *Queries) RemoveBookAuthor(ctx context.Context, arg RemoveBookAuthorParams) error {
	_, err := q.db.ExecContext(ctx, removeBookAuthor, arg.BookID, arg.AuthorID)
	return err
}
