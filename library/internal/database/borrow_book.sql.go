// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: borrow_book.sql

package database

import (
	"context"
	"time"
)

const createBorrowBook = `-- name: CreateBorrowBook :exec
INSERT INTO "Borrow_Book"(student_id, due_date)
VALUES ($1, $2)
RETURNING id, student_id, borrow_date, due_date, return_date, is_return, created_at, updated_at
`

type CreateBorrowBookParams struct {
	StudentID string
	DueDate   time.Time
}

func (q *Queries) CreateBorrowBook(ctx context.Context, arg CreateBorrowBookParams) error {
	_, err := q.db.ExecContext(ctx, createBorrowBook, arg.StudentID, arg.DueDate)
	return err
}

const getBorrowBookByID = `-- name: GetBorrowBookByID :one
SELECT bb.id, bb.student_id, bb.borrow_date, bb.due_date, bb.return_date, bb.is_return, bb.created_at, bb.updated_at
FROM "Borrow_Book" as bb
WHERE bb.id = $1
`

func (q *Queries) GetBorrowBookByID(ctx context.Context, id int32) (BorrowBook, error) {
	row := q.db.QueryRowContext(ctx, getBorrowBookByID, id)
	var i BorrowBook
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.BorrowDate,
		&i.DueDate,
		&i.ReturnDate,
		&i.IsReturn,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const returnBorrowBook = `-- name: ReturnBorrowBook :exec
UPDATE "Borrow_Book"
SET is_return = true, updated_at = now(), return_date = now()
WHERE id = $1
`

func (q *Queries) ReturnBorrowBook(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, returnBorrowBook, id)
	return err
}
