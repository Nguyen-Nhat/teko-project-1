// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: borrow_book_detail.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const getBorrowBookDetailByBorrowId = `-- name: GetBorrowBookDetailByBorrowId :many
SELECT id, borrow_book_id, book_id, quantity
FROM "Borrow_Book_Detail"
WHERE borrow_book_id = $1
`

func (q *Queries) GetBorrowBookDetailByBorrowId(ctx context.Context, borrowBookID int32) ([]BorrowBookDetail, error) {
	rows, err := q.db.QueryContext(ctx, getBorrowBookDetailByBorrowId, borrowBookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BorrowBookDetail
	for rows.Next() {
		var i BorrowBookDetail
		if err := rows.Scan(
			&i.ID,
			&i.BorrowBookID,
			&i.BookID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBorrowBookDetails = `-- name: GetBorrowBookDetails :many
SELECT bbd.id, bbd.borrow_book_id, bbd.book_id, bbd.quantity, b.title, bb.student_id, bb.borrow_date , bb.due_date, CEIL(COUNT(*) OVER() / (1.0 * $1)) AS total_page
FROM "Borrow_Book" bb INNER JOIN "Borrow_Book_Detail" bbd ON bb.id = bbd.borrow_book_id
INNER JOIN "Book" b ON bbd.book_id = b.id
WHERE bb.is_return = false
AND bb.student_id = $2
AND (EXTRACT(DAY FROM AGE(bb.due_date, NOW())) >= 0
         AND EXTRACT(DAY FROM AGE(bb.due_date, NOW())) <= $3::int
         OR $3::int IS NULL)
LIMIT $1
OFFSET $1 * ($4::int - 1)
`

type GetBorrowBookDetailsParams struct {
	Size      int32
	StudentID sql.NullString
	DayRange  sql.NullInt32
	Page      int32
}

type GetBorrowBookDetailsRow struct {
	ID           int32
	BorrowBookID int32
	BookID       int32
	Quantity     int32
	Title        string
	StudentID    string
	BorrowDate   time.Time
	DueDate      time.Time
	TotalPage    float64
}

func (q *Queries) GetBorrowBookDetails(ctx context.Context, arg GetBorrowBookDetailsParams) ([]GetBorrowBookDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBorrowBookDetails,
		arg.Size,
		arg.StudentID,
		arg.DayRange,
		arg.Page,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBorrowBookDetailsRow
	for rows.Next() {
		var i GetBorrowBookDetailsRow
		if err := rows.Scan(
			&i.ID,
			&i.BorrowBookID,
			&i.BookID,
			&i.Quantity,
			&i.Title,
			&i.StudentID,
			&i.BorrowDate,
			&i.DueDate,
			&i.TotalPage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBorrowBookDetails = `-- name: InsertBorrowBookDetails :many
INSERT INTO "Borrow_Book_Detail"(borrow_book_id,book_id,quantity)
VALUES($1, unnest($2::int[]), unnest($3::int[]))
RETURNING id, borrow_book_id, book_id, quantity
`

type InsertBorrowBookDetailsParams struct {
	BorrowBookID int32
	BookIds      []int32
	Quantities   []int32
}

func (q *Queries) InsertBorrowBookDetails(ctx context.Context, arg InsertBorrowBookDetailsParams) ([]BorrowBookDetail, error) {
	rows, err := q.db.QueryContext(ctx, insertBorrowBookDetails, arg.BorrowBookID, pq.Array(arg.BookIds), pq.Array(arg.Quantities))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BorrowBookDetail
	for rows.Next() {
		var i BorrowBookDetail
		if err := rows.Scan(
			&i.ID,
			&i.BorrowBookID,
			&i.BookID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
