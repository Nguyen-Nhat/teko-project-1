// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	database "library/internal/database"

	mock "github.com/stretchr/testify/mock"

	req "library/internal/dto/req"
)

// IAuthorService is an autogenerated mock type for the IAuthorService type
type IAuthorService struct {
	mock.Mock
}

// CreateAuthor provides a mock function with given fields: ctx, data
func (_m *IAuthorService) CreateAuthor(ctx context.Context, data *req.AuthorPostDto) (*database.Author, int, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthor")
	}

	var r0 *database.Author
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *req.AuthorPostDto) (*database.Author, int, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *req.AuthorPostDto) *database.Author); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *req.AuthorPostDto) int); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *req.AuthorPostDto) error); ok {
		r2 = rf(ctx, data)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAuthorById provides a mock function with given fields: ctx, id
func (_m *IAuthorService) GetAuthorById(ctx context.Context, id int) (*database.Author, int, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorById")
	}

	var r0 *database.Author
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*database.Author, int, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *database.Author); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) int); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewIAuthorService creates a new instance of IAuthorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuthorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuthorService {
	mock := &IAuthorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
