// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	database "library/internal/database"

	mock "github.com/stretchr/testify/mock"

	req "library/internal/dto/req"

	res "library/internal/dto/res"
)

// IBookService is an autogenerated mock type for the IBookService type
type IBookService struct {
	mock.Mock
}

// AddAuthorToBook provides a mock function with given fields: ctx, bookId, authorId
func (_m *IBookService) AddAuthorToBook(ctx context.Context, bookId int, authorId int) (*database.BookAuthor, int, error) {
	ret := _m.Called(ctx, bookId, authorId)

	if len(ret) == 0 {
		panic("no return value specified for AddAuthorToBook")
	}

	var r0 *database.BookAuthor
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (*database.BookAuthor, int, error)); ok {
		return rf(ctx, bookId, authorId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *database.BookAuthor); ok {
		r0 = rf(ctx, bookId, authorId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.BookAuthor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, bookId, authorId)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, bookId, authorId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AddGenreToBook provides a mock function with given fields: ctx, bookId, genreId
func (_m *IBookService) AddGenreToBook(ctx context.Context, bookId int, genreId int) (*database.BookGenre, int, error) {
	ret := _m.Called(ctx, bookId, genreId)

	if len(ret) == 0 {
		panic("no return value specified for AddGenreToBook")
	}

	var r0 *database.BookGenre
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (*database.BookGenre, int, error)); ok {
		return rf(ctx, bookId, genreId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *database.BookGenre); ok {
		r0 = rf(ctx, bookId, genreId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.BookGenre)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, bookId, genreId)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, bookId, genreId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateBook provides a mock function with given fields: ctx, data
func (_m *IBookService) CreateBook(ctx context.Context, data *req.BookPostDto) (*database.Book, int, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateBook")
	}

	var r0 *database.Book
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *req.BookPostDto) (*database.Book, int, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *req.BookPostDto) *database.Book); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *req.BookPostDto) int); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *req.BookPostDto) error); ok {
		r2 = rf(ctx, data)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBookDetailById provides a mock function with given fields: ctx, bookId
func (_m *IBookService) GetBookDetailById(ctx context.Context, bookId int) (*res.BookDetailDto, int, error) {
	ret := _m.Called(ctx, bookId)

	if len(ret) == 0 {
		panic("no return value specified for GetBookDetailById")
	}

	var r0 *res.BookDetailDto
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*res.BookDetailDto, int, error)); ok {
		return rf(ctx, bookId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *res.BookDetailDto); ok {
		r0 = rf(ctx, bookId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*res.BookDetailDto)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) int); ok {
		r1 = rf(ctx, bookId)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, bookId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPageBookWithFilter provides a mock function with given fields: ctx, data
func (_m *IBookService) GetPageBookWithFilter(ctx context.Context, data *req.BookPageDto) (*res.PageResult, int, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for GetPageBookWithFilter")
	}

	var r0 *res.PageResult
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *req.BookPageDto) (*res.PageResult, int, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *req.BookPageDto) *res.PageResult); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*res.PageResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *req.BookPageDto) int); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *req.BookPageDto) error); ok {
		r2 = rf(ctx, data)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveAuthorFromBook provides a mock function with given fields: ctx, bookId, authorId
func (_m *IBookService) RemoveAuthorFromBook(ctx context.Context, bookId int, authorId int) (interface{}, int, error) {
	ret := _m.Called(ctx, bookId, authorId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAuthorFromBook")
	}

	var r0 interface{}
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (interface{}, int, error)); ok {
		return rf(ctx, bookId, authorId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) interface{}); ok {
		r0 = rf(ctx, bookId, authorId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, bookId, authorId)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, bookId, authorId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveGenreFromBook provides a mock function with given fields: ctx, bookId, genreId
func (_m *IBookService) RemoveGenreFromBook(ctx context.Context, bookId int, genreId int) (interface{}, int, error) {
	ret := _m.Called(ctx, bookId, genreId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGenreFromBook")
	}

	var r0 interface{}
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (interface{}, int, error)); ok {
		return rf(ctx, bookId, genreId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) interface{}); ok {
		r0 = rf(ctx, bookId, genreId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, bookId, genreId)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, bookId, genreId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewIBookService creates a new instance of IBookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBookService {
	mock := &IBookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
